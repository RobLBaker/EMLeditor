[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Robert Baker. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Baker R (2022). EMLeditor: View Edit EML. R package version 0.0.1.1.","code":"@Manual{,   title = {EMLeditor: View and Edit EML},   author = {Robert Baker},   year = {2022},   note = {R package version 0.0.1.1}, }"},{"path":[]},{"path":[]},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"View and Edit EML","text":"goal EMLeditor edit EML-formatted xml files. Specifically, EMLeditor provides many functions useful U.S. National Park Service generating metadata statistical data packages uploaded DataStore. NPS affiliation assumed default. However, functions viewing editing metadata may useful people outside NPS.","code":""},{"path":"/index.html","id":"workflow-outline","dir":"","previous_headings":"","what":"Workflow outline","title":"View and Edit EML","text":"EMLeditor’s primary objective edit view EML formatted files, generate scratch. suggested workflow : Use EMLassemblyline::make_eml() generate initial EML document save .xml file (NPS naming convention : *_metadata.xml) Use EML::read_eml() function load EML file R R object. Use EMLeditor functions edit metadata R evaluate whether metadata acceptable (don’t forget use EML::eml_validate() make sure generating valid EML). Use EML::write_eml() function write R object back XML (remember NPS naming convention metadata files *_metadata.xml). use EMLeditor functions alter metadata (e.g. “set” class functions) also silently add National Park Service publisher (including location, ROR, etc) metadata unless set NPS=FALSE. leave default setting NPS=TRUE, EMLeditor also assume data package created “NPS” add information metadata. EMLeditor also add information version EMLeditor used edit metadata (instance used “set” class functions).","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"View and Edit EML","text":"can install development version EMLeditor GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"nationalparkservice/EMLeditor\")"},{"path":"/index.html","id":"details","dir":"","previous_headings":"","what":"Details","title":"View and Edit EML","text":"detailed description use EML editor functions guide functions required complete EML metadata creation construct NPS data package uploading DataStore, see complete guide.","code":""},{"path":"/index.html","id":"example-1","dir":"","previous_headings":"","what":"Example 1:","title":"View and Edit EML","text":"basic workflow adding Digital Object Identifier:","code":"library(EMLeditor) library(EML)  # load a pre-existing EML-formated xml file: my_eml <- EML::read_eml(\"EML_metadata.xml\", from = \"xml\")  # the 7-digit number is your DataStore Reference number. # It is automatically generated when you initiate a draft Reference. # Your DOI is reserved but will not be registered/activated until publication. my_eml2 <- set_doi(my_eml, \"1234567\")  # make sure your EML is valid. EML::eml_validate(my_eml2)  # write the new R object back to XML: write_eml(my_eml2, \"EML_metadata.xml\")"},{"path":"/index.html","id":"example-2","dir":"","previous_headings":"","what":"Example 2:","title":"View and Edit EML","text":"upload data package (data files *_metadata.xml) DataStore, DataStore (soon) automatically create readme.txt file accompany data package. can generate mock readme.txt file see whether basic metadata *_metadata.xml file correct. need upload mock file. just tool inspect metadata. actual readme generated DataStore may deviate slightly.","code":"# load a pre-existing EML-formated xml file: my_eml <- EML::read_eml(\"my_EML_metadata.xml\", from = \"xml\")  # Do some stuff with your EML metadata in R. # For instance, add a literature cited section. # bibtex_file is a file with your literature cited in bibtex format, typically with a .bib extension. # Set NPS=FALSE if you do NOT want NPS listed as the publisher. # If NPS is the publisher, this defaults to TRUE and need not be specified. my_eml2 <- set_lit(my_eml, bibtex_file, NPS = FALSE)  # make sure your EML is valid: EML::eml_validate(my_eml2)  # writes a .txt file to your working directory. # (FYI Lit cited doesn't show up in the mock readme) write_readme(my_eml2, \"MockReadMe.txt\")  # Assuming you're happy with the readme file generated, write the object to XML: EML::write_eml(my_eml2, \"my_EML2_metadata.xml\")"},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 EMLeditor authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/dot-get_unit_polygon.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Park Unit Polygon — .get_unit_polygon","title":"Get Park Unit Polygon — .get_unit_polygon","text":".get_unit_polygon gets polygon given park unit.","code":""},{"path":"/reference/dot-get_unit_polygon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Park Unit Polygon — .get_unit_polygon","text":"","code":".get_unit_polygon(unit_code)"},{"path":"/reference/dot-get_unit_polygon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Park Unit Polygon — .get_unit_polygon","text":"unit_code string (typically 4 characters) park unit code.","code":""},{"path":"/reference/dot-get_unit_polygon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Park Unit Polygon — .get_unit_polygon","text":"park polygon","code":""},{"path":"/reference/dot-get_unit_polygon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Park Unit Polygon — .get_unit_polygon","text":"retrieves geoJSON string polygon park unit NPS Rest services. Note: official boundary (erm... ok ?!?).","code":""},{"path":"/reference/dot-get_unit_polygon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Park Unit Polygon — .get_unit_polygon","text":"","code":"if (FALSE) { poly<-.get_unit_polygon(\"BICY\") }"},{"path":"/reference/dot-set_for_by_nps.html","id":null,"dir":"Reference","previous_headings":"","what":"Set ","title":"Set ","text":".set_for_by_nps adds element additionalMetadata NPS set TRUE second element agencyOriginated set \"NPS\" understanding data products created NPS NPS originating agency.","code":""},{"path":"/reference/dot-set_for_by_nps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set ","text":"","code":".set_for_by_nps(eml_object)"},{"path":"/reference/dot-set_for_by_nps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set ","text":"eml_object R object imported (typically EML-formatted .xml file) using EML::read_eml(<filename>, =\"xml\").","code":""},{"path":"/reference/dot-set_for_by_nps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set ","text":"eml_object","code":""},{"path":"/reference/dot-set_for_by_nps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set ","text":"","code":"if (FALSE) { .set_for_by_nps(eml_object) }"},{"path":"/reference/dot-set_npspublisher.html","id":null,"dir":"Reference","previous_headings":"","what":"inject NPS Publisher info into metadata — .set_npspublisher","title":"inject NPS Publisher info into metadata — .set_npspublisher","text":".set_npspublisher injects static NPS-specific publisher info eml documents. Calls sub-function set.forOrByNPS, adds additionalMetadata element NPS = TRUE.","code":""},{"path":"/reference/dot-set_npspublisher.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"inject NPS Publisher info into metadata — .set_npspublisher","text":"","code":".set_npspublisher(eml_object)"},{"path":"/reference/dot-set_npspublisher.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"inject NPS Publisher info into metadata — .set_npspublisher","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(<filename>, =\"xml\").","code":""},{"path":"/reference/dot-set_npspublisher.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"inject NPS Publisher info into metadata — .set_npspublisher","text":"eml_object","code":""},{"path":"/reference/dot-set_npspublisher.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"inject NPS Publisher info into metadata — .set_npspublisher","text":"checks see publisher element exists, injects NPS-specific info EML publisher, publication location, ROR id - types things NPS data non-data publications require user input. function embedded set. write. class functions (get. functions?).","code":""},{"path":"/reference/dot-set_npspublisher.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"inject NPS Publisher info into metadata — .set_npspublisher","text":"","code":"if (FALSE) { .set_npspublisher(eml_object) }"},{"path":"/reference/dot-set_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Add/update EMLeditor version — .set_version","title":"Add/update EMLeditor version — .set_version","text":".set_version adds current version EMLeditor EML document.","code":""},{"path":"/reference/dot-set_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add/update EMLeditor version — .set_version","text":"","code":".set_version(eml_object)"},{"path":"/reference/dot-set_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add/update EMLeditor version — .set_version","text":"eml_object R object imported (typically EML-formatted .xml file) using EML::read_eml(<filename>, =\"xml\").","code":""},{"path":"/reference/dot-set_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add/update EMLeditor version — .set_version","text":"eml_object","code":""},{"path":"/reference/dot-set_version.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add/update EMLeditor version — .set_version","text":".set_version adds current version EMLeditor metadata, specifically \"additionalMetadata\" element","code":""},{"path":"/reference/dot-set_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add/update EMLeditor version — .set_version","text":"","code":"if (FALSE) { .set_version(eml_object) }"},{"path":"/reference/get_abstract.html","id":null,"dir":"Reference","previous_headings":"","what":"returns the abstract — get_abstract","title":"returns the abstract — get_abstract","text":"returns text <abstract> tag.","code":""},{"path":"/reference/get_abstract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"returns the abstract — get_abstract","text":"","code":"get_abstract(eml_object)"},{"path":"/reference/get_abstract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"returns the abstract — get_abstract","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(<filename>, =\"xml\").","code":""},{"path":"/reference/get_abstract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"returns the abstract — get_abstract","text":"text string","code":""},{"path":"/reference/get_abstract.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"returns the abstract — get_abstract","text":"get_abstract returns text <abstract> tag attempts clean common text issues, enforcing UTF-8 formatting, getting rid carriage returns, new lines, <para> <literalLayout> tags mucks layout, line breaks, etc. see characters like abstract, make sure edit abstract text editor (e.g. Notepad Word). save text new object view using writeLines()","code":""},{"path":"/reference/get_abstract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"returns the abstract — get_abstract","text":"","code":"if (FALSE) { abstract<-get_abstract(eml_object) writeLines(abstract) }"},{"path":"/reference/get_author_list.html","id":null,"dir":"Reference","previous_headings":"","what":"returns the authors — get_author_list","title":"returns the authors — get_author_list","text":"get_author_list returns text string authors listed <creator> tag.","code":""},{"path":"/reference/get_author_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"returns the authors — get_author_list","text":"","code":"get_author_list(eml_object)"},{"path":"/reference/get_author_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"returns the authors — get_author_list","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(<filename>, =\"xml\").","code":""},{"path":"/reference/get_author_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"returns the authors — get_author_list","text":"text string","code":""},{"path":"/reference/get_author_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"returns the authors — get_author_list","text":"get_author_list assumes every author least 1 first name (either <givenName> <givenName1>) one last name (<surName>). Middle names (<givenName2>) optional. author List formatted last name, comma,  first name first author fist name, last name subsequent authors. last author's name preceeded ''.","code":""},{"path":"/reference/get_author_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"returns the authors — get_author_list","text":"","code":"if (FALSE) { get_author_list(eml_object) }"},{"path":"/reference/get_begin_date.html","id":null,"dir":"Reference","previous_headings":"","what":"returns the first date — get_begin_date","title":"returns the first date — get_begin_date","text":"get_begin_date returns date earliest data point data package","code":""},{"path":"/reference/get_begin_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"returns the first date — get_begin_date","text":"","code":"get_begin_date(eml_object)"},{"path":"/reference/get_begin_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"returns the first date — get_begin_date","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(<filename>, =\"xml\").","code":""},{"path":"/reference/get_begin_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"returns the first date — get_begin_date","text":"text string","code":""},{"path":"/reference/get_begin_date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"returns the first date — get_begin_date","text":"returns date <beginDate> tag. Although dates formatted according ISO-8601 (YYYY-MM-DD) also check common formats return date text string: \"DD Month YYYY\"","code":""},{"path":"/reference/get_begin_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"returns the first date — get_begin_date","text":"","code":"if (FALSE) { get_begin_date(eml_object) }"},{"path":"/reference/get_citation.html","id":null,"dir":"Reference","previous_headings":"","what":"returns the data package citation — get_citation","title":"returns the data package citation — get_citation","text":"returns Chicago manual style citation data package","code":""},{"path":"/reference/get_citation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"returns the data package citation — get_citation","text":"","code":"get_citation(eml_object)"},{"path":"/reference/get_citation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"returns the data package citation — get_citation","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(<filename>, =\"xml\").","code":""},{"path":"/reference/get_citation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"returns the data package citation — get_citation","text":"text string","code":""},{"path":"/reference/get_citation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"returns the data package citation — get_citation","text":"get_citation allows user preview citation look like. Harper's Ferry Style Guide recommends using Chicago Manual Style formatting citations. citation formatted according modified version Chicago Manual Style's Author-Date journal article format currently Chicago Manual Style format specified datasets data packages. compliance DataCite's recommendations regarding including DOIs citations, citation displays entire DOI https://www.doi.org/10.58370/xxxxxx\".","code":""},{"path":"/reference/get_citation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"returns the data package citation — get_citation","text":"","code":"if (FALSE) { get_citation(eml_object) }"},{"path":"/reference/get_cui.html","id":null,"dir":"Reference","previous_headings":"","what":"returns a CUI statement — get_cui","title":"returns a CUI statement — get_cui","text":"get_cui returns english-language translation CUI codes","code":""},{"path":"/reference/get_cui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"returns a CUI statement — get_cui","text":"","code":"get_cui(eml_object)"},{"path":"/reference/get_cui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"returns a CUI statement — get_cui","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(<filename>, =\"xml\").","code":""},{"path":"/reference/get_cui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"returns a CUI statement — get_cui","text":"text string","code":""},{"path":"/reference/get_cui.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"returns a CUI statement — get_cui","text":"get_cui accesses contents Controlled Unclassified Information (CUI) tag, <CUI> returns appropriate string english-language text based properties CUI code. thee <CUI> tag empty exist, get_cui alerts user suggests specifying CUI using set_cui() funciton.","code":""},{"path":"/reference/get_cui.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"returns a CUI statement — get_cui","text":"","code":"if (FALSE) { get_cui(eml_object) }"},{"path":"/reference/get_doi.html","id":null,"dir":"Reference","previous_headings":"","what":"returns the DOI — get_doi","title":"returns the DOI — get_doi","text":"returns text string DOI data package","code":""},{"path":"/reference/get_doi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"returns the DOI — get_doi","text":"","code":"get_doi(eml_object)"},{"path":"/reference/get_doi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"returns the DOI — get_doi","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(<filename>, =\"xml\").","code":""},{"path":"/reference/get_doi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"returns the DOI — get_doi","text":"text string","code":""},{"path":"/reference/get_doi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"returns the DOI — get_doi","text":"get_doi accesses contents <alternateIdentifier> tag text manipulation return string DOI including URL prefaced 'doi: '.","code":""},{"path":"/reference/get_doi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"returns the DOI — get_doi","text":"","code":"if (FALSE) { get_doi(eml_object)  }"},{"path":"/reference/get_drr_doi.html","id":null,"dir":"Reference","previous_headings":"","what":"returns the DOI of the associated DRR — get_drr_doi","title":"returns the DOI of the associated DRR — get_drr_doi","text":"get_drr_doi returns text string associated Data Release Report (DRR)'s DOI.","code":""},{"path":"/reference/get_drr_doi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"returns the DOI of the associated DRR — get_drr_doi","text":"","code":"get_drr_doi(eml_object)"},{"path":"/reference/get_drr_doi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"returns the DOI of the associated DRR — get_drr_doi","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(<filename>, =\"xml\").","code":""},{"path":"/reference/get_drr_doi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"returns the DOI of the associated DRR — get_drr_doi","text":"text string","code":""},{"path":"/reference/get_drr_doi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"returns the DOI of the associated DRR — get_drr_doi","text":"get_drr_doi accesses <usageCitation> tag(s) searches string \"DRR: https://doi.org/\". string found, contents tag returned. <usageCitation> tag empty present, user informed pointed set_drr_doi() function add DOI associated DRR.","code":""},{"path":"/reference/get_drr_doi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"returns the DOI of the associated DRR — get_drr_doi","text":"","code":"if (FALSE) { get_drr_doi(eml_object) }"},{"path":"/reference/get_ds_id.html","id":null,"dir":"Reference","previous_headings":"","what":"returns the DataStore Reference ID — get_ds_id","title":"returns the DataStore Reference ID — get_ds_id","text":"get_ds_id returns DataStore Reference ID string text.","code":""},{"path":"/reference/get_ds_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"returns the DataStore Reference ID — get_ds_id","text":"","code":"get_ds_id(eml_object)"},{"path":"/reference/get_ds_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"returns the DataStore Reference ID — get_ds_id","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(<filename>, =\"xml\").","code":""},{"path":"/reference/get_ds_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"returns the DataStore Reference ID — get_ds_id","text":"text string","code":""},{"path":"/reference/get_ds_id.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"returns the DataStore Reference ID — get_ds_id","text":"accesses DOI listed <alternateIdentifier> tag trims last 7 digits, identical DataStore Reference ID. <alternateIdentifier> tag empty, notifies user DOI associate metadata suggests adding one using set_doi() (edit_doi() also work).","code":""},{"path":"/reference/get_ds_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"returns the DataStore Reference ID — get_ds_id","text":"","code":"if (FALSE) { get_ds_id(eml_object)  }"},{"path":"/reference/get_end_date.html","id":null,"dir":"Reference","previous_headings":"","what":"returns the last date — get_end_date","title":"returns the last date — get_end_date","text":"get_end_date returns date last data point data package","code":""},{"path":"/reference/get_end_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"returns the last date — get_end_date","text":"","code":"get_end_date(eml_object)"},{"path":"/reference/get_end_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"returns the last date — get_end_date","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(<filename>, =\"xml\").","code":""},{"path":"/reference/get_end_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"returns the last date — get_end_date","text":"text sting","code":""},{"path":"/reference/get_end_date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"returns the last date — get_end_date","text":"returns date <endDate> tag. Although dates formatted according ISO-8601 (YYYY-MM-DD) also check common formats return date text string: \"DD Month YYYY\"","code":""},{"path":"/reference/get_end_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"returns the last date — get_end_date","text":"","code":"if (FALSE) { get_end_date(eml_object) }"},{"path":"/reference/get_file_info.html","id":null,"dir":"Reference","previous_headings":"","what":"displays file names, sizes, and descriptions — get_file_info","title":"displays file names, sizes, and descriptions — get_file_info","text":"get_file_info returns plain-text table containing file names, file sizes, short descriptions files.","code":""},{"path":"/reference/get_file_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"displays file names, sizes, and descriptions — get_file_info","text":"","code":"get_file_info(eml_object)"},{"path":"/reference/get_file_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"displays file names, sizes, and descriptions — get_file_info","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(<filename>, =\"xml\").","code":""},{"path":"/reference/get_file_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"displays file names, sizes, and descriptions — get_file_info","text":"text string","code":""},{"path":"/reference/get_file_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"displays file names, sizes, and descriptions — get_file_info","text":"get_file_info returns file names (listed <objectName> tag), size files (listed <size> tag) converts bytes (B) easily interpretable unit (KB, MB, GB, etc). Technically uses powers 2^10 KB actually kibibyte (1024 bytes) kilobyte (1000 bytes). Similarly MB mebibyte megabyte, GB gibibyte gigabyte, etc. practical purposes probably irrelevant. Finally, short description provided file (<entityDescription> tag).","code":""},{"path":"/reference/get_file_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"displays file names, sizes, and descriptions — get_file_info","text":"","code":"if (FALSE) { get_file_info(eml_object) }"},{"path":"/reference/get_lit.html","id":null,"dir":"Reference","previous_headings":"","what":"Get literature cited — get_lit","title":"Get literature cited — get_lit","text":"get_lit prints bibtex fromated literature cited screen.","code":""},{"path":"/reference/get_lit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get literature cited — get_lit","text":"","code":"get_lit(eml_object)"},{"path":"/reference/get_lit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get literature cited — get_lit","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(<filename>, =\"xml\").","code":""},{"path":"/reference/get_lit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get literature cited — get_lit","text":"character string","code":""},{"path":"/reference/get_lit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get literature cited — get_lit","text":"get_lit currently supports bibtex formatted references. get_lit gets items <literatureCited> tag prints screen.","code":""},{"path":"/reference/get_lit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get literature cited — get_lit","text":"","code":"if (FALSE) { get_lit(eml_object) }"},{"path":"/reference/get_park_units.html","id":null,"dir":"Reference","previous_headings":"","what":"returns the park unit connections — get_park_units","title":"returns the park unit connections — get_park_units","text":"returns string park unit codes data collected","code":""},{"path":"/reference/get_park_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"returns the park unit connections — get_park_units","text":"","code":"get_park_units(eml_object)"},{"path":"/reference/get_park_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"returns the park unit connections — get_park_units","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(<filename>, =\"xml\").","code":""},{"path":"/reference/get_park_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"returns the park unit connections — get_park_units","text":"text string","code":""},{"path":"/reference/get_park_units.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"returns the park unit connections — get_park_units","text":"get_park_units accesses contents <geographicDescription> tags returns contents tag contains text \"NPS Unit Connections\". <geographicDescription>, alerts user suggests adding park unit connections using set_park_units() function.","code":""},{"path":"/reference/get_park_units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"returns the park unit connections — get_park_units","text":"","code":"if (FALSE) { get_park_units(eml_object) }"},{"path":"/reference/get_producing_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the Producing Units — get_producing_units","title":"Returns the Producing Units — get_producing_units","text":"get_producing_units returns whatever metadataProvider eml element. Set producing units using set_producing_units function.","code":""},{"path":"/reference/get_producing_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the Producing Units — get_producing_units","text":"","code":"get_producing_units(eml_object)"},{"path":"/reference/get_producing_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the Producing Units — get_producing_units","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(<filename>, =\"xml\").","code":""},{"path":"/reference/get_producing_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the Producing Units — get_producing_units","text":"character sting","code":""},{"path":"/reference/get_producing_units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns the Producing Units — get_producing_units","text":"","code":"if (FALSE) { get_producing_units(eml_object) }"},{"path":"/reference/get_title.html","id":null,"dir":"Reference","previous_headings":"","what":"returns the data package title — get_title","title":"returns the data package title — get_title","text":"get_title returns text string title data package","code":""},{"path":"/reference/get_title.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"returns the data package title — get_title","text":"","code":"get_title(eml_object)"},{"path":"/reference/get_title.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"returns the data package title — get_title","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(<filename>, =\"xml\").","code":""},{"path":"/reference/get_title.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"returns the data package title — get_title","text":"text string","code":""},{"path":"/reference/get_title.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"returns the data package title — get_title","text":"accesses <title> tags (can several, file given separate title). Assumes first instance <title> referes entire data package returns text string, ignoring contents <title> tags.","code":""},{"path":"/reference/get_title.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"returns the data package title — get_title","text":"","code":"if (FALSE) { get_title(eml_object) }"},{"path":"/reference/new_doi.html","id":null,"dir":"Reference","previous_headings":"","what":"Force-edits an existing DOI — new_doi","title":"Force-edits an existing DOI — new_doi","text":"new_doi forces changes existing DOI","code":""},{"path":"/reference/new_doi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Force-edits an existing DOI — new_doi","text":"","code":"new_doi(eml_object, ds_ref, NPS = TRUE)"},{"path":"/reference/new_doi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Force-edits an existing DOI — new_doi","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(<filename>, =\"xml\"). ds_ref 7-digit reference code generated DataStore draft reference initiated. worry https://www.doi.org data package prefix - automatically added function. NPS defaults TRUE. Checks EML NPS publisher info injects publisher empty. publisher already exists, nothing. publishing NPS, set FALSE.","code":""},{"path":"/reference/new_doi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Force-edits an existing DOI — new_doi","text":"EML-formatted R object","code":""},{"path":"/reference/new_doi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Force-edits an existing DOI — new_doi","text":"DOI already exists <alternateidentifier> tag (get_doi() check), allows user -write existing DOI.  WARNING: cause loss system=\"https://doi.org\" setting. use really already DOI.","code":""},{"path":"/reference/new_doi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Force-edits an existing DOI — new_doi","text":"","code":"if (FALSE) {  eml_object<-new_doi(eml_object, \"1111111\") }"},{"path":"/reference/set_abstract.html","id":null,"dir":"Reference","previous_headings":"","what":"adds an abstract — set_abstract","title":"adds an abstract — set_abstract","text":"set_abstract adds (replaces) simple abstract.","code":""},{"path":"/reference/set_abstract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"adds an abstract — set_abstract","text":"","code":"set_abstract(eml_object, abstract, NPS = TRUE)"},{"path":"/reference/set_abstract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"adds an abstract — set_abstract","text":"eml_object R object imported (typically EML-formatted .xml file) using EML::read_eml(<filename>, =\"xml\"). abstract text string abstract. can generate directly R import .txt file. NPS defaults TRUE. Checks EML NPS publisher info injects publisher empty. publisher already exists, nothing. publishing NPS, set FALSE","code":""},{"path":"/reference/set_abstract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"adds an abstract — set_abstract","text":"EML-formatted R object","code":""},{"path":"/reference/set_abstract.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"adds an abstract — set_abstract","text":"checks abstract. abstract found, inserts abstract given @param abstract. existing abstract found, user asked whether want replace appropriate action taken. Currently set_abstract allow paragraphs complex formatting. strongly encouraged open abstract text editor notepad make sure stray characters. need multiple paragraphs, need via EMLassemblyline (now).","code":""},{"path":"/reference/set_abstract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"adds an abstract — set_abstract","text":"","code":"if (FALSE) { eml_object<-set_abstract(eml_object, \"This is a very short abstract\") }"},{"path":"/reference/set_cui.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds CUI to metadata — set_cui","title":"Adds CUI to metadata — set_cui","text":"set_cui adds CUI codes EML metadata","code":""},{"path":"/reference/set_cui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds CUI to metadata — set_cui","text":"","code":"set_cui(   eml_object,   cui_code = c(\"PUBFUL\", \"PUBVER\", \"NOCON\", \"DL ONLY\", \"FEDCON\", \"FED ONLY\", \"NPSONLY\"),   NPS = TRUE )"},{"path":"/reference/set_cui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds CUI to metadata — set_cui","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(<filename>, =\"xml\"). cui_code string consisting one 7 potential CUI codes (defaults \"PUBFUL\"). Pay attention spaces: FED - Contains CUI. federal employees access (similar \"internal \" DataStore) FEDCON - Contains CUI. federal employees federal contractors access (also much like current \"internal \" setting DataStore) DL - Contains CUI. available names list individuals (list individuals TBD) NOCON - Contains  CUI. Federal, state, local, tribal employees may access, contractors . PUBVER - contain CUI. original data contained CUI, data package CUI obscured longer contains CUI. PUBFUL - contain CUI. original data contained CUI. data obscured altered generate data package. NPSONLY - Contains CUI. NPS access . NPS defaults TRUE. Checks EML NPS publisher info injects publisher empty. publisher already exists, nothing. publishing NPS, set FALSE","code":""},{"path":"/reference/set_cui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds CUI to metadata — set_cui","text":"EML-formatted R object","code":""},{"path":"/reference/set_cui.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds CUI to metadata — set_cui","text":"set_cui adds CUI code tag <CUI> <additionalMetadata><metadata>.","code":""},{"path":"/reference/set_cui.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds CUI to metadata — set_cui","text":"","code":"if (FALSE) { set_cui(eml_object, \"PUBFUL\") }"},{"path":"/reference/set_doi.html","id":null,"dir":"Reference","previous_headings":"","what":"Check & set a DOI — set_doi","title":"Check & set a DOI — set_doi","text":"Check & set DOI","code":""},{"path":"/reference/set_doi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check & set a DOI — set_doi","text":"","code":"set_doi(eml_object, ds_ref, NPS = TRUE)"},{"path":"/reference/set_doi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check & set a DOI — set_doi","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(<filename>, =\"xml\"). ds_ref 7-digit reference code generated DataStore draft reference initiated. NPS logical defaults TRUE. Checks EML NPS publisher info injects publisher empty. publisher already exists, nothing. publishing NPS, set FALSE","code":""},{"path":"/reference/set_doi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check & set a DOI — set_doi","text":"EML-formatted R object","code":""},{"path":"/reference/set_doi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check & set a DOI — set_doi","text":"set_doi checks see DOI <alternateIdentifier> tag. EMLassemblyline package stores data package DOIs tag (although official EML schema DOI different location). DOI <alternateIdentifier> tag, function adds DOI & reports new DOI. DOI, function reports existing DOI, prompts user input either retain existing DOI overwrite . Reports back existing new DOI, depending user input..","code":""},{"path":"/reference/set_doi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check & set a DOI — set_doi","text":"","code":"if (FALSE) {  eml_object<-set_doi(eml_object, ds_ref)  }"},{"path":"/reference/set_drr_doi.html","id":null,"dir":"Reference","previous_headings":"","what":"adds DRR connection — set_drr_doi","title":"adds DRR connection — set_drr_doi","text":"set_drr_doi adds DOI associated DRR","code":""},{"path":"/reference/set_drr_doi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"adds DRR connection — set_drr_doi","text":"","code":"set_drr_doi(eml_object, drr_ref_id, drr_title, NPS = TRUE)"},{"path":"/reference/set_drr_doi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"adds DRR connection — set_drr_doi","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(<filename>, =\"xml\"). drr_ref_id 7-digit string DataStore Reference ID DRR associated data package. drr_title title DRR appears DataStore Reference. NPS defaults TRUE. Checks EML NPS publisher info injects publisher empty. publisher already exists, nothing. Also fills organizationName DRR creator. publishing NPS/, set NPS=\"organization name\".","code":""},{"path":"/reference/set_drr_doi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"adds DRR connection — set_drr_doi","text":"EML-formatted R object","code":""},{"path":"/reference/set_drr_doi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"adds DRR connection — set_drr_doi","text":"adds uses DataStore Reference ID associate DRR <usageCitation> properly formatted DOI (prefaced \"DRR: \") <usageCitation> element. Creates populates required children elements usageCitation including DRR title, creator organization name, report number. Note default NPS=TRUE sets DRR creator organization NPS. want organization name DRR NPS, set NPS=\"Favorite Organization\". sets id flag usageCitation \"associatedDRR\".","code":""},{"path":"/reference/set_drr_doi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"adds DRR connection — set_drr_doi","text":"","code":"if (FALSE) { drr_title<-\"Data Release Report for Data Package 1234\" set_drr_doi(eml_object, \"2293234\", drr_title) }"},{"path":"/reference/set_language.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the human language used for metadata — set_language","title":"Set the human language used for metadata — set_language","text":"set_language allows user specify language metadata (data) constructed . field intended hold human language, .e. English, Spanish, Cherokee.","code":""},{"path":"/reference/set_language.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the human language used for metadata — set_language","text":"","code":"set_language(eml_object, lang, NPS = TRUE)"},{"path":"/reference/set_language.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the human language used for metadata — set_language","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(<filename>, =\"xml\"). lang string consisting language data metadata constructed , example, \"English\", \"Spanish\", \"Navajo\". Capitalization matter, spelling ! input provided converted 3-digit ISO 639-2 codes. NPS Logical. Checks EML NPS publisher info injects publisher empty. publisher already exists, nothing. publishing NPS, set FALSE. NPS=TRUE, originatingAgency set NPS field maps DataStore's \"NPS\" set TRUE.","code":""},{"path":"/reference/set_language.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the human language used for metadata — set_language","text":"eml_object","code":""},{"path":"/reference/set_language.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set the human language used for metadata — set_language","text":"English words language data metadata constructed (e.g. \"English\") automatically converted 3-letter codes languages listed ISO 639-2 (available https://www.loc.gov/standards/iso639-2/php/code_list.php) inserted metadata.","code":""},{"path":"/reference/set_language.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the human language used for metadata — set_language","text":"","code":"if (FALSE) { set_language(eml_object, \"english\") set_language(eml_object, \"Spanish\") set_language(eml_object, \"nAvAjO\") }"},{"path":"/reference/set_lit.html","id":null,"dir":"Reference","previous_headings":"","what":"Edit literature cited — set_lit","title":"Edit literature cited — set_lit","text":"set_lit interactive method editing literature cited sections.","code":""},{"path":"/reference/set_lit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edit literature cited — set_lit","text":"","code":"set_lit(eml_object, bibtex_file, NPS = TRUE)"},{"path":"/reference/set_lit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Edit literature cited — set_lit","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(<filename>, =\"xml\"). bibtex_file text file one bib-formatted references extension .bib. Make sure .bib file working directory, supply path file. NPS defaults TRUE. Checks EML NPS publisher info injects publisher empty. publisher already exists, nothing. publishing NPS, set FALSE","code":""},{"path":"/reference/set_lit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Edit literature cited — set_lit","text":"EML object","code":""},{"path":"/reference/set_lit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Edit literature cited — set_lit","text":"looks literature cited <literatureCited> tag finds none, inserts bibtex-formatted literature cited supplied *.bib file. literature cited exists asks either nothing, replace existing literature cited supplied .bib file append additional references supplied .bib file.","code":""},{"path":"/reference/set_lit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Edit literature cited — set_lit","text":"","code":"if (FALSE) { eml_object<-litcited2<-set_lit(eml_object, \"bibfile.bib\") }"},{"path":"/reference/set_park_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Park Unit Connections to metadata — set_park_units","title":"Add Park Unit Connections to metadata — set_park_units","text":"set_park_units adds specified park unit connections N, E, S, W bounding boxes <geographicCoverage>.","code":""},{"path":"/reference/set_park_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Park Unit Connections to metadata — set_park_units","text":"","code":"set_park_units(eml_object, park_units, NPS = TRUE)"},{"path":"/reference/set_park_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Park Unit Connections to metadata — set_park_units","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(<filename>, =\"xml\"). park_units list comma-separated strings string park unit code. NPS defaults TRUE. Checks EML NPS publisher info injects publisher empty. publisher already exists, nothing. publishing NPS, set FALSE","code":""},{"path":"/reference/set_park_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Park Unit Connections to metadata — set_park_units","text":"EML-formatted R object","code":""},{"path":"/reference/set_park_units.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Park Unit Connections to metadata — set_park_units","text":"Adds Park Unit Connection(s) <coverage>. Park Unit Connection(s) (typically) four-letter codes describing park unit(s) data collected (e.g. ROMO, ROMN). park unit connection given separate <geographicCoverage> element. park unit connection, unit name listed <geographicDescription> prefaced \"NPS Unit Connections:\". Required child elements (bounding coordinates) auto populated. <geographicCoverage> elements exist, set_park_units add , overwrite . <geographicCoverage> elements exist, set_park_units create new set <geographicCoverage> elements.","code":""},{"path":"/reference/set_park_units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Park Unit Connections to metadata — set_park_units","text":"","code":"if (FALSE) { park_units<-(\"ROMO, GRSD, TRYME\") set_park_units(eml_object, park_units) }"},{"path":"/reference/set_producing_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets Producing Units for use in DataStore — set_producing_units","title":"Sets Producing Units for use in DataStore — set_producing_units","text":"set_producing_units inserts unit code producing unit data/metadata EML metdata file.","code":""},{"path":"/reference/set_producing_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets Producing Units for use in DataStore — set_producing_units","text":"","code":"set_producing_units(eml_object, prod_units, NPS = TRUE)"},{"path":"/reference/set_producing_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets Producing Units for use in DataStore — set_producing_units","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(<filename>, =\"xml\"). prod_units string producing unit Unit Code list unit codes, example \"ROMO\" c(\"ROMN\", \"SODN\") NPS defaults TRUE. Checks EML NPS publisher info injects publisher empty. publisher already exists, nothing. publishing NPS, set FALSE. NPS=TRUE, originatingAgency set NPS field maps DataStore's \"NPS\" set TRUE.","code":""},{"path":"/reference/set_producing_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets Producing Units for use in DataStore — set_producing_units","text":"EML object","code":""},{"path":"/reference/set_producing_units.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sets Producing Units for use in DataStore — set_producing_units","text":"inserts unit code metadataProvider element. Currently add existing metadataProvider fields; just -write . also currently handles single producing unit. See @param NPS details sub-functions. Additionally, information version EML editor used injected metadata.","code":""},{"path":[]},{"path":"/reference/set_protocol.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a connection to the protocol under which the data were collected — set_protocol","title":"Adds a connection to the protocol under which the data were collected — set_protocol","text":"set_protocol adds metadata link protocol data described collected. automatically inserts link DataStore landing page protocol well ?????","code":""},{"path":"/reference/set_protocol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a connection to the protocol under which the data were collected — set_protocol","text":"","code":"set_protocol(eml_object, protocol_id, NPS = TRUE)"},{"path":"/reference/set_protocol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a connection to the protocol under which the data were collected — set_protocol","text":"eml_object R object imported (typically EML-formatted .xml file) using EmL::read_eml(<filename>, =\"xml\"). protocol_id string. 7-digit number identifying DataStore reference number Project describes inventory monitoring project. NPS Logical. Checks EML NPS publisher info injects publisher empty. publisher already exists, nothing. publishing NPS, set FALSE. NPS=TRUE, originatingAgency set NPS field maps DataStore's \"NPS\" set TRUE.","code":""},{"path":"/reference/set_protocol.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds a connection to the protocol under which the data were collected — set_protocol","text":"set_protocol requires protocols projects organized specific fashion DataStore. Errors generated function stem either protocol published (publicly available) obsolete protocol/project organization within DataStore.","code":""},{"path":"/reference/set_protocol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds a connection to the protocol under which the data were collected — set_protocol","text":"","code":"if (FALSE) { set_protocol(eml_object, 2222140) }"},{"path":"/reference/set_title.html","id":null,"dir":"Reference","previous_headings":"","what":"Edit data package title — set_title","title":"Edit data package title — set_title","text":"Edit data package title","code":""},{"path":"/reference/set_title.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edit data package title — set_title","text":"","code":"set_title(eml_object, data_package_title, NPS = TRUE)"},{"path":"/reference/set_title.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Edit data package title — set_title","text":"eml_object R object imported (typically EML-formatted .xml file) using EML::read_eml(<filename>, =\"xml\"). data_package_title character string become new title data package. can specified directly function call can previously defined object holds character string. NPS logical defaults TRUE. Checks EML NPS publisher info injects publisher empty. publisher already exists, nothing. publishing NPS, set FALSE","code":""},{"path":"/reference/set_title.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Edit data package title — set_title","text":"EML-formatted R object","code":""},{"path":"/reference/set_title.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Edit data package title — set_title","text":"set_title function checks see existing title asks user like change title. work still needed function get_eml() automatically returns instances given tag. Specifying title important function work well.","code":""},{"path":"/reference/set_title.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Edit data package title — set_title","text":"","code":"if (FALSE) { data_package_title<-\"New Title. Must match DataStore Reference title.\" eml_object<-set_title(eml_object, data_package_title) }"},{"path":"/reference/write_readme.html","id":null,"dir":"Reference","previous_headings":"","what":"Writes a README file — write_readme","title":"Writes a README file — write_readme","text":"write_readme writes readme file based current metadata","code":""},{"path":"/reference/write_readme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Writes a README file — write_readme","text":"","code":"write_readme(eml_object, outfile)"},{"path":"/reference/write_readme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Writes a README file — write_readme","text":"eml_object R object imported (typically EML-formatted .xml file) using EML::read_eml(<filename>, =\"xml\"). outfile name file want write, typically *.txt.","code":""},{"path":"/reference/write_readme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Writes a README file — write_readme","text":"character sting readable format (saved given outfile)","code":""},{"path":"/reference/write_readme.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Writes a README file — write_readme","text":"write_readme writes mock-readme file eventually automatically generated DataStore. file error checking purposes . something looks , can go back fix metadata correct upload readme file data package.","code":""},{"path":"/reference/write_readme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Writes a README file — write_readme","text":"","code":"if (FALSE) { write_readme(eml_object, \"TestReadMe.txt\") }"}]
